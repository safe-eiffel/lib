SQLPrimaryKeys
Conformance

Version Introduced: ODBC 1.0
Standards Compliance: ODBC

Summary

SQLPrimaryKeys returns the column names that make up the primary key for a table. The driver returns the information as a result set. This function does not support returning primary keys from multiple tables in a single call.

Syntax

SQLRETURN SQLPrimaryKeys(
     SQLHSTMT     StatementHandle,
     SQLCHAR *     CatalogName,
     SQLSMALLINT     NameLength1,
     SQLCHAR *     SchemaName,
     SQLSMALLINT     NameLength2,
     SQLCHAR *     TableName,
     SQLSMALLINT     NameLength3);
Arguments 

StatementHandle 
[Input]
Statement handle. 
CatalogName 
[Input]
Catalog name. If a driver supports catalogs for some tables but not for others, such as when the driver retrieves data from different DBMSs, an empty string ("") denotes those tables that do not have catalogs. CatalogName cannot contain a string search pattern. 
If the SQL_ATTR_METADATA_ID statement attribute is set to SQL_TRUE, CatalogName is treated as an identifier and its case is not significant. If it is SQL_FALSE, CatalogName is an ordinary argument; it is treated literally, and its case is significant. For more information, see "Arguments in Catalog Functions" in Chapter 7: Catalog Functions. 

NameLength1 
[Input]
Length in bytes of *CatalogName. 
SchemaName 
[Input]
Schema name. If a driver supports schemas for some tables but not for others, such as when the driver retrieves data from different DBMSs, an empty string ("") denotes those tables that do not have schemas. SchemaName cannot contain a string search pattern. 
If the SQL_ATTR_METADATA_ID statement attribute is set to SQL_TRUE, SchemaName is treated as an identifier and its case is not significant. If it is SQL_FALSE, SchemaName is an ordinary argument; it is treated literally, and its case is not significant. 

NameLength2 
[Input]
Length in bytes of *SchemaName. 
TableName 
[Input]
Table name. This argument cannot be a null pointer. TableName cannot contain a string search pattern. 
If the SQL_ATTR_METADATA_ID statement attribute is set to SQL_TRUE, TableName is treated as an identifier and its case is not significant. If it is SQL_FALSE, TableName is an ordinary argument; it is treated literally, and its case is not significant. 

NameLength3 
[Input]
Length in bytes of *TableName. 
Returns

SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_STILL_EXECUTING, SQL_ERROR, or SQL_INVALID_HANDLE.

Diagnostics

When SQLPrimaryKeys returns SQL_ERROR or SQL_SUCCESS_WITH_INFO, an associated SQLSTATE value can be obtained by calling SQLGetDiagRec with a HandleType of SQL_HANDLE_STMT and a Handle of StatementHandle. The following table lists the SQLSTATE values commonly returned by SQLPrimaryKeys and explains each one in the context of this function; the notation "(DM)" precedes the descriptions of SQLSTATEs returned by the Driver Manager. The return code associated with each SQLSTATE value is SQL_ERROR, unless noted otherwise.

SQLSTATE Error Description 
01000 General warning Driver-specific informational message. (Function returns SQL_SUCCESS_WITH_INFO.) 
08S01 Communication link failure The communication link between the driver and the data source to which the driver was connected failed before the function completed processing. 
24000 Invalid cursor state (DM) A cursor was open on the StatementHandle, and SQLFetch or SQLFetchScroll had been called. 
A cursor was open on the StatementHandle, but SQLFetch or SQLFetchScroll had not been called.
 
40001 Serialization failure The transaction was rolled back due to a resource deadlock with another transaction. 
40003 Statement completion unknown The associated connection failed during the execution of this function, and the state of the transaction cannot be determined. 
HY000 General error An error occurred for which there was no specific SQLSTATE and for which no implementation-specific SQLSTATE was defined. The error message returned by SQLGetDiagRec in the *MessageText buffer describes the error and its cause. 
HY001 Memory allocation error The driver was unable to allocate memory required to support execution or completion of the function. 
HY008 Operation canceled Asynchronous processing was enabled for the StatementHandle. The function was called, and before it completed execution, SQLCancel was called on the StatementHandle. Then the function was called again on the StatementHandle. 
The function was called, and before it completed execution, SQLCancel was called on the StatementHandle from a different thread in a multithread application.
 
HY009 Invalid use of null pointer (DM) The TableName argument was a null pointer. 
The SQL_ATTR_METADATA_ID statement attribute was set to SQL_TRUE, the CatalogName argument was a null pointer, and SQLGetInfo with the SQL_CATALOG_NAME information type returns that catalog names are supported.

(DM) The SQL_ATTR_METADATA_ID statement attribute was set to SQL_TRUE, and the SchemaName argument was a null pointer.
 
HY010 Function sequence error (DM) An asynchronously executing function (not this one) was called for the StatementHandle and was still executing when this function was called. 
(DM) SQLExecute, SQLExecDirect, SQLBulkOperations, or SQLSetPos was called for the StatementHandle and returned SQL_NEED_DATA. This function was called before data was sent for all data-at-execution parameters or columns.
 
HY013 Memory management error The function call could not be processed because the underlying memory objects could not be accessed, possibly because of low memory conditions. 
HY090 Invalid string or buffer length (DM) The value of one of the name length arguments was less than 0 but not equal to SQL_NTS, and the associated name argument is not a null pointer. 
The value of one of the name length arguments exceeded the maximum length value for the corresponding name.
 
HYC00 Optional feature not implemented A catalog was specified, and the driver or data source does not support catalogs. 
A schema was specified and the driver or data source does not support schemas.

The combination of the current settings of the SQL_ATTR_CONCURRENCY and SQL_ATTR_CURSOR_TYPE statement attributes was not supported by the driver or data source.

The SQL_ATTR_USE_BOOKMARKS statement attribute was set to SQL_UB_VARIABLE, and the SQL_ATTR_CURSOR_TYPE statement attribute was set to a cursor type for which the driver does not support bookmarks.
 
HYT00 Timeout expired The timeout period expired before the data source returned the requested result set. The timeout period is set through SQLSetStmtAttr, SQL_ATTR_QUERY_TIMEOUT. 
HYT01 Connection timeout expired The connection timeout period expired before the data source responded to the request. The connection timeout period is set through SQLSetConnectAttr, SQL_ATTR_CONNECTION_TIMEOUT. 
IM001 Driver does not support this function (DM) The driver associated with the StatementHandle does not support the function. 

Comments

SQLPrimaryKeys returns the results as a standard result set, ordered by TABLE_CAT, TABLE_SCHEM, TABLE_NAME, and KEY_SEQ. For information about how this information might be used, see "Uses of Catalog Data" in Chapter 7: Catalog Functions.

The following columns have been renamed for ODBC 3.x. The column name changes do not affect backward compatibility because applications bind by column number.

ODBC 2.0 column ODBC 3.x column 
TABLE_QUALIFIER TABLE_CAT 
TABLE_OWNER TABLE_SCHEM 

To determine the actual lengths of the TABLE_CAT, TABLE_SCHEM, TABLE_NAME, and COLUMN_NAME columns, call SQLGetInfo with the SQL_MAX_CATALOG_NAME_LEN, SQL_MAX_SCHEMA_NAME_LEN, SQL_MAX_TABLE_NAME_LEN, and SQL_MAX_COLUMN_NAME_LEN options.

Note   For more information about the general use, arguments, and returned data of ODBC catalog functions, see Chapter 7: Catalog Functions.
The following table lists the columns in the result set. Additional columns beyond column 6 (PK_NAME) can be defined by the driver. An application should gain access to driver-specific columns by counting down from the end of the result set rather than specifying an explicit ordinal position. For more information, see "Data Returned by Catalog Functions" in Chapter 7: Catalog Functions.


Column name Column number 
Data type 
Comments 
TABLE_CAT
(ODBC 1.0) 1 Varchar Primary key table catalog name; NULL if not applicable to the data source. If a driver supports catalogs for some tables but not for others, such as when the driver retrieves data from different DBMSs, it returns an empty string ("") for those tables that do not have catalogs. 
TABLE_SCHEM
(ODBC 1.0) 2 Varchar Primary key table schema name; NULL if not applicable to the data source. If a driver supports schemas for some tables but not for others, such as when the driver retrieves data from different DBMSs, it returns an empty string ("") for those tables that do not have schemas. 
TABLE_NAME
(ODBC 1.0) 3 Varchar
not NULL Primary key table name. 
COLUMN_NAME
(ODBC 1.0) 4 Varchar
not NULL Primary key column name. The driver returns an empty string for a column that does not have a name. 
KEY_SEQ
(ODBC 1.0) 5 Smallint
not NULL Column sequence number in key (starting with 1). 
PK_NAME
(ODBC 2.0) 6 Varchar Primary key name. NULL if not applicable to the data source. 

Code Example

See SQLForeignKeys.

Related Functions

For information about See 
Binding a buffer to a column in a result set SQLBindCol 
Canceling statement processing SQLCancel 
Fetching a block of data or scrolling through a result set SQLFetchScroll 
Fetching a single row or a block of data in a forward-only direction SQLFetch 
Returning the columns of foreign keys SQLForeignKeys 
Returning table statistics and indexes SQLStatistics 

© 1998-2001 Microsoft Corporation. All rights reserved.
