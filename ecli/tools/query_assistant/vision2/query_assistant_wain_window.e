indexing
	description: "Objects that represent an EV_TITLED_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date$"
	revision: "$Revision$"

class
	QUERY_ASSISTANT_WAIN_WINDOW

inherit
	QUERY_ASSISTANT_WAIN_WINDOW_IMP
		redefine
			initialize_constants
		end

	KL_SHARED_FILE_SYSTEM
		undefine
			copy, default_create
		end

feature {NONE} -- Initialization

	initialize_constants is
		local
			dialog : EV_ERROR_DIALOG
			exc : EXCEPTIONS
		do
			file_name_cell.put ("qagui_constants.txt")
			if not file_system.file_exists (file_name) then
				create dialog
				dialog.set_title ("Fatal Error")
				dialog.set_text ("Could not find file `qagui_constants.txt'%Nin directory '"+
					file_system.cwd+"'%N%NTODO: install this file first.%N%NAborting.")
				dialog.set_buttons (<<"Abort">>)
				dialog.show_modal_to_window (Current)
				create exc
				exc.die (1)
			end
			Precursor
		end

	user_initialization is
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			create assistant.make (Current)
			set_title ("Query assistant")
		end

feature -- Access

	assistant : GUI_QUERY_ASSISTANT

feature -- Element change

	set_assistant (an_assistant : GUI_QUERY_ASSISTANT) is
		require
			an_assistant_not_void: an_assistant /= Void
		do
			assistant := an_assistant
		ensure
			assistant_set: assistant = an_assistant
		end

feature {NONE} -- Implementation

	on_input_file_choose_pressed is
			-- Called by `select_actions' of `input_file_choose'.
		local
			chooser : EV_FILE_OPEN_DIALOG
		do
			create chooser.make_with_title ("Choix fichier d'entrée")
			chooser.show_modal_to_window (Current)
			input_file_name.set_text (chooser.file_name)
		end

	on_output_directory_choose_pressed is
			-- Called by `select_actions' of `output_directory_choose'.
		local
			chooser : EV_DIRECTORY_DIALOG
			input : STRING
		do
			create chooser.make_with_title ("Choix du répertoire de sortie")
			input := input_file_name.text
			if file_system.directory_exists (file_system.dirname (input)) then
				chooser.set_start_directory (file_system.dirname (input))
			end
			chooser.show_modal_to_window (Current)
			output_directory_name.set_text (chooser.directory)
		end

	on_generate_button_pressed is
			-- Called by `select_actions' of `generate_button'.
		do
			if assistant /= Void then
				assistant.execute
			end
		end

	on_close_request is
		local
			app : EV_SHARED_APPLICATION
		do
			create app
			app.ev_application.destroy
		end

	on_menu_help_about is
		local
			help_about_dialog : HELP_ABOUT_DIALOG
		do
			create help_about_dialog
			help_about_dialog.show_modal_to_window (Current)
		end


end
